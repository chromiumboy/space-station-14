using System.Numerics;
using Content.Client.UserInterface.Controls;
using Content.Shared.Pinpointer;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;
using Robust.Shared.Timing;

namespace Content.Client.Pinpointer.UI;

[GenerateTypedNameReferences]
public sealed partial class StationMapWindow : FancyWindow
{
    private readonly IEntityManager _entManager;

    private const float UpdateTime = 1.0f;
    private float _updateTimer = 0f;

    private EntityUid? _owner;

    public StationMapWindow(EntityUid? mapUid, EntityUid? trackedEntity)
    {
        RobustXamlLoader.Load(this);
        _entManager = IoCManager.Resolve<IEntityManager>();

        NavMapScreen.MapUid = mapUid;

        if (trackedEntity != null)
        {
            _owner = trackedEntity;
            NavMapScreen.TrackedCoordinates.Add(new EntityCoordinates(trackedEntity.Value, Vector2.Zero), (true, Color.Cyan));
        }

        if (_entManager.TryGetComponent<MetaDataComponent>(mapUid, out var metadata))
        {
            Title = metadata.EntityName;
        }

        NavMapScreen.ForceNavMapUpdate();
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        _updateTimer += args.DeltaSeconds;

        if (_updateTimer >= UpdateTime)
        {
            _updateTimer -= UpdateTime;

            UpdateNavMap();
        }
    }

    private void UpdateNavMap()
    {
        NavMapScreen.RegionOverlays.Clear();
        NavMapScreen.RegionColors.Clear();

        if (_owner == null)
            return;

        if (!_entManager.TryGetComponent<TransformComponent>(_owner, out var xform) ||
            !_entManager.TryGetComponent<NavMapComponent>(xform.GridUid, out var navMapRegions))
            return;

        foreach (var (regionOwner, tiles) in navMapRegions.FloodedRegions)
            NavMapScreen.RegionOverlays[regionOwner] = tiles;

        foreach (var beacon in navMapRegions.Beacons)
            NavMapScreen.RegionColors[beacon.NetEnt] = beacon.Color * Color.DimGray;
    }
}
