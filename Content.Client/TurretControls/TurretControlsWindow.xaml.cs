using Content.Shared.TurretControls;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using System.Numerics;

namespace Content.Client.TurretControls;

[GenerateTypedNameReferences]
public sealed partial class TurretControlsWindow : BaseWindow
{
    [Dependency] private IPrototypeManager _protoManager = default!;

    public event Action? SendUpdateToServerAction;

    private EntityUid? _owner;
    private TurretControlsUiKey? _uiKey;

    private TurretControlsArmamentState _armamentState = TurretControlsArmamentState.Safe;

    private Color _safeColor = Color.FromHex("#33e633");
    private Color _stunColor = Color.FromHex("#dfb827");
    private Color _lethalColor = Color.FromHex("#da2a2a");

    public TurretControlsWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        CloseButton.OnPressed += _ => Close();
        XamlChildren = ContentsContainer.Children;
    }

    private void Initialize()
    {
        if (_owner == null || _uiKey == null)
            return;

        SafeButton.OnButtonUp += args => OnSafeButtonPressed();
        StunButton.OnButtonUp += args => OnStunButtonPressed();
        LethalButton.OnButtonUp += args => OnLethalButtonPressed();

        if (!_protoManager.TryIndex<TurretControlSettingGroupPrototype>(_uiKey.Value.ToString(), out var groupPrototypes))
            return;

        foreach (var protoId in groupPrototypes.Settings)
        {
            var setting = MakeTargetingControlSetting(protoId);

            if (setting == null)
                continue;

            TargetingControlSettings.AddChild(setting);
        }
    }

    private void OnUIChanged()
    {
        var ev = new TurretControlSettingsChangedMessage()
        {
            ArmamentState = _armamentState,
        };

        SendUpdateToServerAction?.Invoke();
    }

    private void OnSafeButtonPressed()
    {
        if (SafeButton.Pressed)
        {
            SafeButton.Pressed = false;
            return;
        }

        StunButton.Pressed = false;
        LethalButton.Pressed = false;
        ContentsContainer.Modulate = _safeColor;
        OnUIChanged();
    }

    private void OnStunButtonPressed()
    {
        if (StunButton.Pressed)
        {
            StunButton.Pressed = false;
            return;
        }

        SafeButton.Pressed = false;
        LethalButton.Pressed = false;
        ContentsContainer.Modulate = _stunColor;
        OnUIChanged();
    }

    private void OnLethalButtonPressed()
    {
        if (LethalButton.Pressed)
        {
            LethalButton.Pressed = false;
            return;
        }

        SafeButton.Pressed = false;
        StunButton.Pressed = false;
        ContentsContainer.Modulate = _lethalColor;
        OnUIChanged();
    }

    private void OnToggleSettingButtonPressed(MonoToneButton clickedButton, MonoToneButton otherButton)
    {
        if (clickedButton.Pressed)
        {
            clickedButton.Pressed = false;
            return;
        }

        otherButton.Pressed = false;
        OnUIChanged();
    }

    private TurretControlSetting? MakeTargetingControlSetting(ProtoId<TurretControlSettingPrototype> protoId)
    {
        if (!_protoManager.TryIndex(protoId, out var prototype))
            return null;

        var setting = new TurretControlSetting(protoId, Loc.GetString(prototype.Name));

        setting.IgnoreMonoToneButton.OnButtonUp += args => OnToggleSettingButtonPressed(setting.IgnoreMonoToneButton, setting.TargetMonoToneButton);
        setting.TargetMonoToneButton.OnButtonUp += args => OnToggleSettingButtonPressed(setting.TargetMonoToneButton, setting.IgnoreMonoToneButton);

        return setting;
    }

    public void SetOwnerAndUiKey(EntityUid owner, TurretControlsUiKey uiKey)
    {
        _owner = owner;
        _uiKey = uiKey;

        Initialize();
    }

    protected override DragMode GetDragModeFor(Vector2 relativeMousePos)
    {
        return DragMode.Move;
    }
}

public sealed class MonoToneButton : Button
{
    public float BorderThickness = 2f;
    public Color ForegroundColor = Color.White;
    public Color BackgroundColor = new Color(55, 55, 55);

    private PanelContainer _innerPanel;

    public MonoToneButton()
    {
        Label.AddStyleClass("ConsoleText");

        ModulateSelfOverride = ForegroundColor;

        _innerPanel = new PanelContainer()
        {
            HorizontalExpand = true,
            VerticalExpand = true,
        };

        AddChild(_innerPanel);
        _innerPanel.SetPositionFirst();
    }

    protected override void StylePropertiesChanged()
    {
        base.StylePropertiesChanged();

        if (!this.TryGetStyleProperty<StyleBoxTexture>(StylePropertyStyleBox, out var box))
            return;

        Label.ModulateSelfOverride = this.Pressed ? BackgroundColor : ForegroundColor;

        _innerPanel.PanelOverride = new StyleBoxTexture(box)
        {
            Modulate = this.Pressed ? ForegroundColor : BackgroundColor,
        };

        _innerPanel.Margin = new Thickness
            (BorderThickness - box.GetContentMargin(StyleBox.Margin.Left),
            BorderThickness - box.GetContentMargin(StyleBox.Margin.Top),
            BorderThickness - box.GetContentMargin(StyleBox.Margin.Right),
            BorderThickness - box.GetContentMargin(StyleBox.Margin.Bottom));
    }
}
