using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Shared.Access;
using Content.Shared.TurretController;
using Content.Shared.Turrets;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using System.Linq;
using System.Numerics;

namespace Content.Client.TurretController;

[GenerateTypedNameReferences]
public sealed partial class TurretControllerWindow : BaseWindow
{
    [Dependency] private IEntityManager _entManager = default!;
    [Dependency] private IPrototypeManager _protoManager = default!;
    private readonly IResourceCache _cache;

    private EntityUid? _owner;
    private DeployableTurretControllerUiKey? _uiKey;

    private int _tabIndex = 0;

    private readonly ButtonGroup _armamentButtons = new();
    private readonly ButtonGroup _accessGroupsButtons = new();

    // Events
    private event Action<int>? OnAccessGroupChangedEvent;

    public event Action<Dictionary<ProtoId<AccessLevelPrototype>, bool>>? OnAccessLevelsChangedEvent;
    public event Action<int>? OnArmamentSettingChangedEvent;

    // Colors
    private Color[] _themeColors = [Color.FromHex("#33e633"), Color.FromHex("#dfb827"), Color.FromHex("#da2a2a")];

    public TurretControllerWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _cache = IoCManager.Resolve<IResourceCache>();

        CloseButton.OnPressed += _ => Close();
        XamlChildren = ContentsContainer.Children;

        OnAccessGroupChangedEvent += OnAccessGroupChanged;

        var smallFont = _cache.NotoStack(size: 8);
        Footer.FontOverride = smallFont;
    }

    private void Initialize()
    {
        if (_owner == null || _uiKey == null)
            return;

        SafeButton.OnButtonUp += args => OnArmamentButtonPressed(SafeButton, -1);
        StunButton.OnButtonUp += args => OnArmamentButtonPressed(StunButton, 0);
        LethalButton.OnButtonUp += args => OnArmamentButtonPressed(LethalButton, 1);

        SafeButton.Group = _armamentButtons;
        StunButton.Group = _armamentButtons;
        LethalButton.Group = _armamentButtons;

        if (!_entManager.TryGetComponent<DeployableTurretControllerComponent>(_owner, out var turretController))
            return;

        UpdateTheme(turretController.ArmamentState);

        if (_entManager.TryGetComponent<TurretTargetSettingsComponent>(_owner, out var turretTargetSettings))
            RefreshAccessControls(turretTargetSettings.ExemptAccessLevels);
    }

    private void OnArmamentButtonPressed(Button pressedButton, int index)
    {
        UpdateTheme(index);

        OnArmamentSettingChangedEvent?.Invoke(index);
    }

    private void UpdateTheme(int index)
    {
        switch (index)
        {
            case -1:
                SafeButton.Pressed = true;
                break;
            case 0:
                StunButton.Pressed = true;
                break;
            case 1:
                LethalButton.Pressed = true;
                break;
        }

        var shiftedIndex = index + 1;

        if (shiftedIndex >= 0 && shiftedIndex < _themeColors.Length)
            ContentsContainer.Modulate = _themeColors[shiftedIndex];
    }

    public void SetOwnerAndUiKey(EntityUid owner, DeployableTurretControllerUiKey uiKey)
    {
        _owner = owner;
        _uiKey = uiKey;

        Initialize();
    }

    public void UpdateState(DeployableTurretControllerWindowBoundInterfaceState state)
    {
        if (state.TurretStates != null)
            RefreshLinkedTurrets(state.TurretStates);

        if (state.ArmamentState != null)
            UpdateTheme(state.ArmamentState.Value);

        if (state.ExemptAccessLevels != null)
            RefreshAccessControls(state.ExemptAccessLevels);
    }

    public void RefreshLinkedTurrets(List<(string, string)> turretStates)
    {
        var turretCount = turretStates.Count;
        var hasTurrets = turretCount > 0;

        NoLinkedTurretsText.Visible = !hasTurrets;
        LinkedTurretsContainer.Visible = hasTurrets;

        if (!hasTurrets)
            return;

        LinkedTurretsContainer.RemoveAllChildren();

        foreach (var turretState in turretStates)
        {
            var box = new BoxContainer()
            {
                HorizontalExpand = true,
            };

            var label = new Label()
            {
                Text = Loc.GetString("turret-controls-window-turret-status", ("device", turretState.Item1), ("status", Loc.GetString(turretState.Item2))),
                HorizontalAlignment = HAlignment.Left,
                Margin = new Thickness(10f, 0f, 10f, 0f),
                HorizontalExpand = true,
                SetHeight = 20f,
            };

            label.AddStyleClass("ConsoleText");

            box.AddChild(label);
            LinkedTurretsContainer.AddChild(box);
        }
    }

    public void RefreshAccessControls(HashSet<ProtoId<AccessLevelPrototype>> exemptAccessLevels)
    {
        if (_owner == null)
            return;

        if (!_entManager.TryGetComponent<DeployableTurretControllerComponent>(_owner, out var turretControls))
            return;

        var groupedAccessLevels = new Dictionary<AccessGroupPrototype, HashSet<AccessLevelPrototype>>();
 
        AccessGroupList.DisposeAllChildren();
        AccessLevelGrid.DisposeAllChildren();

        foreach (var accessGroup in turretControls.AccessGroups)
        {
            if (!_protoManager.TryIndex(accessGroup, out var accessGroupProto))
                continue;

            groupedAccessLevels.Add(accessGroupProto, new());
        }

        if (_protoManager.TryIndex<AccessGroupPrototype>("General", out var generalAccessProto) &&
            groupedAccessLevels.Keys.FirstOrDefault(x => x.ID != "General") == null)
        {
            groupedAccessLevels.Add(generalAccessProto, new());
        }

        // Try to combine the access levels under broader access groups
        foreach (var accessLevel in turretControls.AccessLevels)
        {
            if (!_protoManager.TryIndex(accessLevel, out var accessLevelProto))
                continue;

            IEnumerable<AccessGroupPrototype> associatedGroups = groupedAccessLevels.Keys.Where(x => x.Tags.Contains(accessLevelProto.ID) == true);

            if (!associatedGroups.Any() && generalAccessProto != null)
                groupedAccessLevels[generalAccessProto].Add(accessLevelProto);

            else
            {
                foreach (var group in associatedGroups)
                    groupedAccessLevels[group].Add(accessLevelProto);
            }
        }

        // Remove access groups with no entries
        foreach (var (group, accessLevels) in groupedAccessLevels)
        {
            if (accessLevels.Count == 0)
                groupedAccessLevels.Remove(group);
        }

        if (_tabIndex >= groupedAccessLevels.Count)
            _tabIndex = groupedAccessLevels.Count - 1;

        // Generate buttons for the access groups
        var orderedAccessGroups = groupedAccessLevels.Keys.OrderBy(x => x.GetAccessGroupName()).ToList();

        for (int i = 0; i < orderedAccessGroups.Count; i++)
        {
            var accessGroup = orderedAccessGroups[i];

            var monotoneButton = new MonotoneButton
            {
                Text = accessGroup.Name != null ? Loc.GetString(accessGroup.Name) : "???",
                ToggleMode = true,
                Pressed = _tabIndex == orderedAccessGroups.IndexOf(accessGroup),

            };

            monotoneButton.Label.AddStyleClass("ConsoleText");
            monotoneButton.Group = _accessGroupsButtons;

            AccessGroupList.AddChild(monotoneButton);

            monotoneButton.OnPressed += _ =>
            {
                OnAccessGroupChangedEvent?.Invoke(monotoneButton.GetPositionInParent());
            };

            // Style the button depending where it is on the list
            if (orderedAccessGroups.Count > 1)
            {
                if (i == 0)
                    monotoneButton.Shape = MonotoneButtonShape.OpenLeft;

                else if (orderedAccessGroups.Count > 1 && i == (orderedAccessGroups.Count - 1))
                    monotoneButton.Shape = MonotoneButtonShape.OpenRight;

                else
                    monotoneButton.Shape = MonotoneButtonShape.OpenBoth;
            }
        }

        // Get access levels for the current tab
        var accessLevelsForTab = groupedAccessLevels[orderedAccessGroups[_tabIndex]];
        accessLevelsForTab = accessLevelsForTab.OrderBy(x => x.GetAccessLevelName()).ToHashSet();

        // Generate an 'all' checkbox
        var checkBoxes = new List<CheckBox>();

        var allCheckBox = new MonotoneCheckBox
        {
            Text = Loc.GetString("turret-controls-window-all-checkbox"),
            ToggleMode = true,
        };

        allCheckBox.Label.AddStyleClass("ConsoleText");

        AccessLevelGrid.AddChild(allCheckBox);

        allCheckBox.OnPressed += args =>
        {
            SetCheckBoxPressedState(checkBoxes, allCheckBox.Pressed);

            var dict = new Dictionary<ProtoId<AccessLevelPrototype>, bool>();

            foreach (var accessLevel in accessLevelsForTab)
                dict.Add(accessLevel, allCheckBox.Pressed);

            OnAccessLevelsChangedEvent?.Invoke(dict);
        };

        // Generate the remaining checkboxes
        foreach (var accessLevel in accessLevelsForTab)
        {
            var container = new BoxContainer()
            {
                HorizontalExpand = true,
            };

            var panel1 = new PanelContainer()
            {
                VerticalExpand = true,
                Margin = new Thickness(9f, -1f, 0f, -1f),
                SetWidth = 2f,
            };

            panel1.AddStyleClass("LowDivider");
            panel1.PanelOverride = new StyleBoxFlat(Color.White);

            container.AddChild(panel1);

            var panel2 = new PanelContainer()
            {
                Margin = new Thickness(0f, 5f, 0f, 5f),
                SetWidth = 10f,
                SetHeight = 2f,
            };

            panel2.AddStyleClass("LowDivider");
            panel2.PanelOverride = new StyleBoxFlat(Color.White);

            container.AddChild(panel2);

            var checkBox = new MonotoneCheckBox
            {
                Text = accessLevel.GetAccessLevelName(),
                ToggleMode = true,
                Margin = new Thickness(0f, 2f, 0f, 2f),
                Pressed = exemptAccessLevels.Contains(accessLevel),
            };

            checkBox.Label.AddStyleClass("ConsoleText");

            checkBoxes.Add(checkBox);
            container.AddChild(checkBox);

            checkBox.OnPressed += args =>
            {
                allCheckBox.Pressed = AreAllCheckBoxesPressed(checkBoxes);

                OnAccessLevelsChangedEvent?.Invoke
                    (new Dictionary<ProtoId<AccessLevelPrototype>, bool>() { { accessLevel, checkBox.Pressed } });
            };

            AccessLevelGrid.AddChild(container);
        }

        // Press the 'all' checkbox if all others are pressed
        allCheckBox.Pressed = AreAllCheckBoxesPressed(checkBoxes);
    }

    private bool AreAllCheckBoxesPressed(List<CheckBox> checkBoxes)
    {
        foreach (var checkBox in checkBoxes)
        {
            if (!checkBox.Pressed)
                return false;
        }

        return true;
    }

    private void SetCheckBoxPressedState(List<CheckBox> checkBoxes, bool pressed)
    {
        foreach (var checkBox in checkBoxes)
            checkBox.Pressed = pressed;
    }

    protected override DragMode GetDragModeFor(Vector2 relativeMousePos)
    {
        return DragMode.Move;
    }

    private void OnAccessGroupChanged(int newTabIndex)
    {
        if (newTabIndex == _tabIndex)
            return;

        _tabIndex = newTabIndex;

        if (_entManager.TryGetComponent<TurretTargetSettingsComponent>(_owner, out var turretTargetSettings))
            RefreshAccessControls(turretTargetSettings.ExemptAccessLevels);
    }
}
