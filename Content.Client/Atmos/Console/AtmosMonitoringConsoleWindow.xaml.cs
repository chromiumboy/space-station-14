using Content.Client.Pinpointer.UI;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Shared.Atmos;
using Content.Shared.Atmos.Components;
using Content.Shared.Atmos.Monitor;
using Content.Shared.FixedPoint;
using Content.Shared.Temperature;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;
using Robust.Shared.Timing;
using Robust.Shared.Utility;
using System.Diagnostics.CodeAnalysis;
using System.Linq;

namespace Content.Client.Atmos.Console;

[GenerateTypedNameReferences]
public sealed partial class AtmosMonitoringConsoleWindow : FancyWindow
{
    private readonly IEntityManager _entManager;
    private readonly SpriteSystem _spriteSystem;
    private readonly IGameTiming _gameTiming;

    private IResourceCache _cache;

    private const float BlinkFrequency = 1f;

    private EntityUid? _owner;
    private NetEntity? _trackedEntity;

    public event Action<NetEntity?>? SendAtmosMonitoringConsoleMessageAction;

    private VectorFont _displayFont;
    private VectorFont _noAlertFont;

    private bool _autoScrollActive = false;
    private bool _autoScrollAwaitsUpdate = false;

    public Dictionary<Gas, string> GasSymbols = new Dictionary<Gas, string>()
    {
        [Gas.Ammonia] = "NH₃",
        [Gas.CarbonDioxide] = "CO₂",
        [Gas.Frezon] = "F",
        [Gas.Nitrogen] = "N₂",
        [Gas.NitrousOxide] = "N₂O",
        [Gas.Oxygen] = "O₂",
        [Gas.Plasma] = "P",
        [Gas.Tritium] = "T",
        [Gas.WaterVapor] = "H₂O",
    };

    public Dictionary<AtmosAlarmType, string> AlarmStrings = new Dictionary<AtmosAlarmType, string>()
    {
        [AtmosAlarmType.Invalid] = "atmos-monitoring-window-invalid-state",
        [AtmosAlarmType.Normal] = "atmos-monitoring-window-normal-state",
        [AtmosAlarmType.Warning] = "atmos-monitoring-window-warning-state",
        [AtmosAlarmType.Danger] = "atmos-monitoring-window-danger-state",
    };

    private Dictionary<AtmosMonitoringConsoleGroup, (SpriteSpecifier.Texture, Color)> _groupBlips = new()
    {
        { AtmosMonitoringConsoleGroup.GasVentPump, (new SpriteSpecifier.Texture(new ResPath("/Textures/Interface/NavMap/beveled_square.png")), Color.DarkGray) },
        { AtmosMonitoringConsoleGroup.GasVentScrubber, (new SpriteSpecifier.Texture(new ResPath("/Textures/Interface/NavMap/beveled_circle.png")), Color.DarkGray) },
        { AtmosMonitoringConsoleGroup.AirAlarm, (new SpriteSpecifier.Texture(new ResPath("/Textures/Interface/NavMap/beveled_star.png")), Color.White) },
    };

    public AtmosMonitoringConsoleWindow(AtmosMonitoringConsoleBoundUserInterface userInterface, EntityUid? owner)
    {
        RobustXamlLoader.Load(this);
        _entManager = IoCManager.Resolve<IEntityManager>();
        _gameTiming = IoCManager.Resolve<IGameTiming>();
        _cache = IoCManager.Resolve<IResourceCache>();

        _spriteSystem = _entManager.System<SpriteSystem>();
        _owner = owner;

        // Pass owner to nav map
        NavMap.Owner = _owner;

        // Set nav map grid uid
        var stationName = Loc.GetString("atmos-monitoring-window-unknown-location");

        if (_entManager.TryGetComponent<TransformComponent>(owner, out var xform))
        {
            NavMap.MapUid = xform.GridUid;

            // Assign station name      
            if (_entManager.TryGetComponent<MetaDataComponent>(xform.GridUid, out var stationMetaData))
                stationName = stationMetaData.EntityName;

            var msg = new FormattedMessage();
            msg.AddMarkup(Loc.GetString("atmos-monitoring-window-station-name", ("stationName", stationName)));

            StationName.SetMessage(msg);
        }

        else
        {
            StationName.SetMessage(stationName);
            NavMap.Visible = false;
        }

        // Set trackable entity selected action
        NavMap.TrackedEntitySelectedAction += SetTrackedEntityFromNavMap;

        // Update nav map
        NavMap.ForceNavMapUpdate();

        //var font = new VectorFont(_cache.GetResource<FontResource>("/Fonts/NotoSans/NotoSansSymbols-Regular.ttf"), 10);
        //MasterTabContainer.StylePropertyDefault<Font>("font", font);
        MasterTabContainer.SetTabTitle(0, Loc.GetString("Alerts"));
        MasterTabContainer.SetTabTitle(1, Loc.GetString("Air alarms"));

        // Track when the MasterTabContainer changes its tab
        //MasterTabContainer.OnTabChanged += OnTabChanged;

        // Set UI toggles
        ShowPipeNetwork.OnToggled += _ => OnShowPipeNetworkToggled();
        ShowInactiveAirAlarms.OnToggled += _ => OnInactiveAirAlarmsToggled();
        //ShowLVCable.OnToggled += _ => OnShowCableToggled(PowerMonitoringConsoleLineGroup.Apc);

        // Set power monitoring message action
        SendAtmosMonitoringConsoleMessageAction += userInterface.SendAtmosMonitoringConsoleMessage;

        _displayFont = new VectorFont(_cache.GetResource<FontResource>("/Fonts/NotoSansDisplay/NotoSansDisplay-Regular.ttf"), 12);
        _noAlertFont = new VectorFont(_cache.GetResource<FontResource>("/Fonts/NotoSans/NotoSans-Regular.ttf"), 18);
    }

    private void OnTabChanged(int tab)
    {
        //SendAtmosMonitoringConsoleMessageAction?.Invoke(_focusEntity);
    }

    private void OnShowPipeNetworkToggled()
    {
        NavMap.ShowPipeNetwork = ShowPipeNetwork.Pressed;
    }

    private void OnInactiveAirAlarmsToggled()
    {

    }

    private void OnSilenceAlertsToggled(NetEntity netEntity, bool toggleState)
    {
        if (!_entManager.TryGetComponent<AtmosMonitoringConsoleComponent>(_owner, out var console))
            return;

        if (toggleState)
            console.SilencedAlerts.Add(netEntity);
        else
            console.SilencedAlerts.Remove(netEntity);
    }

    public void ShowEntites(EntityCoordinates? monitorCoords, AtmosMonitoringConsoleEntry[] activeAlarms, AtmosFocusDeviceData? focusData)
    {
        if (_owner == null)
            return;

        if (!_entManager.TryGetComponent<AtmosMonitoringConsoleComponent>(_owner.Value, out var console))
            return;

        if (_trackedEntity != focusData?.NetEntity)
        {
            SendAtmosMonitoringConsoleMessageAction?.Invoke(_trackedEntity);
            focusData = null;
        }

        // Reset nav map values
        NavMap.TrackedCoordinates.Clear();
        NavMap.TrackedEntities.Clear();

        //
        foreach (var datum in console.AtmosDevices)
        {
            if (!NavMap.Visible)
                continue;

            // Skip inactive air alarms if toggle is off
            if (datum.Group == AtmosMonitoringConsoleGroup.AirAlarm &&
                !ShowInactiveAirAlarms.Pressed)
            {
                var airAlarm = activeAlarms.FirstOrNull(a => a.Entity == datum.NetEntity);

                if (airAlarm == null || airAlarm.Value.AlarmState <= AtmosAlarmType.Normal)
                    continue;
            }

            // Skip atmos devices if the pipe network is toggled off
            if (datum.Group != AtmosMonitoringConsoleGroup.AirAlarm &&
                !ShowPipeNetwork.Pressed)
                continue;

            AddTrackedEntityToNavMap(datum, activeAlarms);
        }

        // Show monitor location
        var mon = _entManager.GetNetEntity(_owner);

        if (monitorCoords != null && mon != null)
        {
            var texture = _spriteSystem.Frame0(new SpriteSpecifier.Texture(new ResPath("/Textures/Interface/NavMap/beveled_circle.png")));
            var blip = new NavMapBlip(monitorCoords.Value, texture, Color.Cyan, true, false);
            NavMap.TrackedEntities[mon.Value] = blip;
        }

        AlertsTable.RemoveAllChildren();
        AirAlarmsTable.RemoveAllChildren();

        foreach (var entry in activeAlarms)
        {
            MakeNewAlarmEntry(entry, console, focusData);
        }

        if (MasterTabContainer.CurrentTab == 0 && AlertsTable.ChildCount == 0)
        {
            var label = new Label()
            {
                Text = Loc.GetString("atmos-monitoring-window-no-active-alerts"),
                HorizontalExpand = true,
                VerticalExpand = true,
                HorizontalAlignment = HAlignment.Center,
                VerticalAlignment = VAlignment.Bottom,
                FontColorOverride = Color.White,
                FontOverride = _noAlertFont,
            };

            AlertsTable.AddChild(label);

            var newlabel = new Label()
            {
                Text = Loc.GetString("atmos-monitoring-window-situation-green"),
                HorizontalExpand = true,
                VerticalExpand = true,
                HorizontalAlignment = HAlignment.Center,
                VerticalAlignment = VAlignment.Top,
                FontColorOverride = StyleNano.GoodGreenFore,
                FontOverride = _noAlertFont,
            };

            AlertsTable.AddChild(newlabel);
        }

        // Update nav map
        NavMap.ForceNavMapUpdate();

        // Auto-scroll reenable
        if (_autoScrollAwaitsUpdate)
        {
            _autoScrollActive = true;
            _autoScrollAwaitsUpdate = false;
        }
    }

    private void AddTrackedEntityToNavMap(AtmosDeviceNavMapData metaData, AtmosMonitoringConsoleEntry[] activeAlarms)
    {
        if (!_groupBlips.TryGetValue(metaData.Group, out var data))
            return;

        var coords = _entManager.GetCoordinates(metaData.NetCoordinates);
        var texture = data.Item1;
        var color = (metaData.Color != null) ? metaData.Color * data.Item2 : data.Item2;

        if (metaData.Group == AtmosMonitoringConsoleGroup.AirAlarm)
        {
            foreach (var alarm in activeAlarms)
            {
                if (alarm.Entity == metaData.NetEntity)
                {
                    if (alarm.AlarmState >= AtmosAlarmType.Warning)
                        color = new Color(255, 205, 0);
                    else
                        color = Color.LimeGreen;

                    //color = ChangeColorBrightness(DetermineAlertColoration(alarm.AlarmState), 1.5f);
                    break;
                }
            }
        }

        var selectable = (metaData.Group == AtmosMonitoringConsoleGroup.AirAlarm);

        var blip = new NavMapBlip(coords, _spriteSystem.Frame0(texture), color.Value, _trackedEntity == metaData.NetEntity, selectable);
        NavMap.TrackedEntities[metaData.NetEntity] = blip;
    }

    private void MakeNewAlarmEntry(AtmosMonitoringConsoleEntry entry, AtmosMonitoringConsoleComponent console, AtmosFocusDeviceData? focusData = null)
    {
        var mainContainer = new AtmosAlarmEntryContainer()
        {
            Orientation = BoxContainer.LayoutOrientation.Vertical,
            HorizontalExpand = true,
            Margin = new Thickness(0, 0, 0, 3),
        };

        mainContainer.AirAlarmUid = entry.Entity;
        mainContainer.Coordinates = _entManager.GetCoordinates(entry.Coordinates);

        if (MasterTabContainer.CurrentTab == 0)
            if (entry.AlarmState > AtmosAlarmType.Normal &&
                !console.SilencedAlerts.Contains(entry.Entity))
                AlertsTable.AddChild(mainContainer);
            else
                return;

        else
            AirAlarmsTable.AddChild(mainContainer);

        var button = new Button()
        {
            HorizontalExpand = true,
            SetHeight = 32,
            Margin = new Thickness(12, 0, 0, 0),
        };

        button.StyleClasses.Add("OpenBoth");

        button.OnButtonUp += args =>
        {
            var prevTrackedEntity = _trackedEntity;

            if (_trackedEntity == entry.Entity)
            {
                _trackedEntity = null;
            }

            else
            {
                _trackedEntity = entry.Entity;
                NavMap.CenterToCoordinates(_entManager.GetCoordinates(entry.Coordinates));
            }

            //NavMap.Focus = _trackedEntity;

            // Send message to console that the focus has changed
            SendAtmosMonitoringConsoleMessageAction?.Invoke(_trackedEntity);

            UpdateAlertsTable(_trackedEntity, prevTrackedEntity);
        };

        mainContainer.AddChild(button);

        var control = new BoxContainer()
        {
            HorizontalExpand = true,
            VerticalExpand = true,
            Orientation = BoxContainer.LayoutOrientation.Horizontal,
        };

        button.AddChild(control);

        /*var backing = new PanelContainer()
        {
            SetWidth = 120f,
            SetHeight = 32,
            HorizontalAlignment = HAlignment.Left,
            Margin = new Thickness(-10f, -2f, 0f, -2f),
            PanelOverride = new StyleBoxFlat
            {
                BackgroundColor = new Color(32, 32, 35),
            },
        };*/

        var backing = new TextureRect()
        {
            //SetWidth = 120f,
            //SetHeight = 32,
            Stretch = TextureRect.StretchMode.Keep,
            HorizontalAlignment = HAlignment.Left,
            TexturePath = "/Textures/Interface/AtmosMonitoring/status_bg.png",
            Margin = new Thickness(-20, -2, 0, 0),
            ModulateSelfOverride = new Color(37, 37, 42),
        };

        control.AddChild(backing);

        var backingContainer = new BoxContainer()
        {
            VerticalExpand = true,
            HorizontalExpand = true,
            Orientation = BoxContainer.LayoutOrientation.Horizontal,
            Margin = new Thickness(8, 0),
        };

        backing.AddChild(backingContainer);

        var arrow = new TextureRect()
        {
            VerticalAlignment = VAlignment.Center,
            SetSize = new System.Numerics.Vector2(12f, 12f),
            Stretch = TextureRect.StretchMode.KeepAspectCentered,
            Margin = new Thickness(3, 0),
        };

        if (entry.Entity == _trackedEntity)
        {
            button.AddStyleClass(StyleNano.StyleClassButtonColorGreen);
            arrow.TexturePath = "/Textures/Interface/Nano/inverted_triangle.svg.png";
        }

        else
        {
            arrow.TexturePath = "/Textures/Interface/Nano/triangle_right.png";
        }

        backingContainer.AddChild(arrow);

        if (!AlarmStrings.TryGetValue(entry.AlarmState, out var alarmString))
            alarmString = "atmos-monitoring-window-invalid-state";

        var state = new Label()
        {
            Text = Loc.GetString(alarmString),
            HorizontalExpand = true,
            HorizontalAlignment = HAlignment.Center,
            //Margin = new Thickness(8, 0),
            FontColorOverride = DetermineAlertColoration(entry.AlarmState),
        };

        backingContainer.AddChild(state);

        var name = new Label()
        {
            Text = Loc.GetString("atmos-monitoring-window-air-alarm-label", ("address", entry.Address)),
            HorizontalExpand = true,
            HorizontalAlignment = HAlignment.Center,
            Margin = new Thickness(5, 0),
        };

        control.AddChild(name);

        if (focusData?.NetEntity == entry.Entity)
        {
            var font = new VectorFont(_cache.GetResource<FontResource>("/Fonts/NotoSans/NotoSans-Bold.ttf"), 11);
            var smallfont = new VectorFont(_cache.GetResource<FontResource>("/Fonts/NotoSans/NotoSans-Regular.ttf"), 10);

            var panelback = new PanelContainer()
            {
                HorizontalExpand = true,
                PanelOverride = new StyleBoxFlat
                {
                    BackgroundColor = new Color(37, 37, 42),
                },
                Margin = new Thickness(1, -1, 1, 0),
            };

            mainContainer.AddChild(panelback);

            var panel = new BoxContainer()
            {
                HorizontalExpand = true,
                VerticalExpand = true,
                Orientation = BoxContainer.LayoutOrientation.Vertical,
            };

            panelback.AddChild(panel);

            if (entry.AlarmState >= AtmosAlarmType.Normal)
            {
                var labelPanel = new PanelContainer()
                {
                    HorizontalExpand = true,
                    PanelOverride = new StyleBoxFlat
                    {
                        //BackgroundColor = new Color(32, 32, 35),
                        BackgroundColor = new Color(37, 37, 42),
                    },
                };

                panel.AddChild(labelPanel);

                var labels = new BoxContainer()
                {
                    HorizontalExpand = true,
                    VerticalExpand = true,
                    Orientation = BoxContainer.LayoutOrientation.Horizontal,
                };

                labelPanel.AddChild(labels);

                var temperature = new Label()
                {
                    Text = Loc.GetString("atmos-monitoring-window-temperature-label"),
                    HorizontalAlignment = HAlignment.Center,
                    VerticalAlignment = VAlignment.Center,
                    HorizontalExpand = true,
                    FontOverride = font,
                    FontColorOverride = Color.DarkGray,
                    Margin = new Thickness(0, 2, 0, 0),
                    SetHeight = 24f,
                };

                labels.AddChild(temperature);

                var pressure = new Label()
                {
                    Text = Loc.GetString("atmos-monitoring-window-pressure-label"),
                    HorizontalAlignment = HAlignment.Center,
                    VerticalAlignment = VAlignment.Center,
                    HorizontalExpand = true,
                    FontOverride = font,
                    FontColorOverride = Color.DarkGray,
                    Margin = new Thickness(0, 2, 0, 0),
                    SetHeight = 24f,
                };

                labels.AddChild(pressure);

                var oxygen = new Label()
                {
                    Text = Loc.GetString("atmos-monitoring-window-oxygenation-label"),
                    HorizontalAlignment = HAlignment.Center,
                    VerticalAlignment = VAlignment.Center,
                    HorizontalExpand = true,
                    FontOverride = font,
                    FontColorOverride = Color.DarkGray,
                    Margin = new Thickness(0, 2, 0, 0),
                    SetHeight = 24f,
                };

                labels.AddChild(oxygen);

                var valuePanel = new PanelContainer()
                {
                    HorizontalExpand = true,
                    PanelOverride = new StyleBoxFlat
                    {
                        BackgroundColor = new Color(32, 32, 35),
                        //BackgroundColor = new Color(37, 37, 42),
                    },
                };

                panel.AddChild(valuePanel);

                var values = new BoxContainer()
                {
                    HorizontalExpand = true,
                    VerticalExpand = true,
                    Orientation = BoxContainer.LayoutOrientation.Horizontal,
                };

                valuePanel.AddChild(values);

                var tempK = (FixedPoint2) focusData.Value.TemperatureData.Item1;
                var tempC = (FixedPoint2) TemperatureHelpers.KelvinToCelsius(tempK.Float());

                var temperatureValue = new Label()
                {
                    Text = Loc.GetString("atmos-monitoring-window-temperature-value", ("valueInC", tempC), ("valueInK", tempK)),
                    HorizontalAlignment = HAlignment.Center,
                    VerticalAlignment = VAlignment.Bottom,
                    HorizontalExpand = true,
                    FontColorOverride = DetermineAlertColoration(focusData.Value.TemperatureData.Item2),
                    Margin = new Thickness(0, 2, 0, 0),
                    MinHeight = 24f,
                };

                values.AddChild(temperatureValue);

                var pressureValue = new Label()
                {
                    Text = Loc.GetString("atmos-monitoring-window-pressure-value", ("value", (FixedPoint2) focusData.Value.PressureData.Item1)),
                    HorizontalAlignment = HAlignment.Center,
                    VerticalAlignment = VAlignment.Bottom,
                    HorizontalExpand = true,
                    FontColorOverride = DetermineAlertColoration(focusData.Value.PressureData.Item2),
                    Margin = new Thickness(0, 2, 0, 0),
                    MinHeight = 24f,
                };

                values.AddChild(pressureValue);

                var oxygenPercent = (FixedPoint2) 0f;
                var nitrogenoxygenAlert = AtmosAlarmType.Normal;
                var nitrogenoxygenColor = StyleNano.DisabledFore;

                if (focusData.Value.GasData.TryGetValue(Gas.Oxygen, out var oxygenData))
                {
                    oxygenPercent = oxygenData.Item2 * 100f;

                    if (oxygenData.Item3 > nitrogenoxygenAlert)
                        nitrogenoxygenAlert = oxygenData.Item3;
                }

                else
                    nitrogenoxygenAlert = AtmosAlarmType.Danger;

                /*if (focusData.Value.GasData.TryGetValue(Gas.Nitrogen, out var nitrogenData))
                {
                    nitrogenPrecent = MathF.Ceiling(nitrogenData.Item2 * 100f);

                    if ((int) nitrogenData.Item3 > (int) nitrogenoxygenAlert)
                        nitrogenoxygenAlert = nitrogenData.Item3;
                }*/

                var oxygenValue = new Label()
                {
                    Text = Loc.GetString("atmos-monitoring-window-oxygenation-value", ("value", oxygenPercent)),
                    HorizontalAlignment = HAlignment.Center,
                    VerticalAlignment = VAlignment.Bottom,
                    HorizontalExpand = true,
                    FontColorOverride = DetermineAlertColoration(nitrogenoxygenAlert),
                    Margin = new Thickness(0, 2, 0, 0),
                    MinHeight = 24f,
                };

                values.AddChild(oxygenValue);


                //

                var labelPanel2 = new PanelContainer()
                {
                    HorizontalExpand = true,
                    PanelOverride = new StyleBoxFlat
                    {
                        //BackgroundColor = new Color(32, 32, 35),
                        BackgroundColor = new Color(37, 37, 42),
                    },
                };

                panel.AddChild(labelPanel2);

                var labels2 = new BoxContainer()
                {
                    HorizontalExpand = true,
                    VerticalExpand = true,
                    Orientation = BoxContainer.LayoutOrientation.Horizontal,
                };

                labelPanel2.AddChild(labels2);

                var contaminants = new Label()
                {
                    Text = Loc.GetString("atmos-monitoring-window-other-gases-label"),
                    HorizontalExpand = true,
                    HorizontalAlignment = HAlignment.Center,
                    VerticalAlignment = VAlignment.Center,
                    FontOverride = font,
                    FontColorOverride = Color.DarkGray,
                    Margin = new Thickness(0, 4, 0, 0),
                    MinHeight = 24f,
                };

                labels2.AddChild(contaminants);

                var valuePanel2 = new PanelContainer()
                {
                    HorizontalExpand = true,
                    PanelOverride = new StyleBoxFlat
                    {
                        BackgroundColor = new Color(32, 32, 35),
                        //BackgroundColor = new Color(37, 37, 42),
                    },
                };

                panel.AddChild(valuePanel2);

                var values2 = new GridContainer()
                {
                    HorizontalExpand = true,
                    VerticalExpand = true,
                    Columns = 4,
                };

                valuePanel2.AddChild(values2);

                var gasData = focusData.Value.GasData.Where(g => g.Key != Gas.Oxygen);

                if (gasData.Count() == 0)
                {
                    var contaminant1 = new Label()
                    {
                        Text = Loc.GetString("atmos-monitoring-window-other-gases-value-nil"),
                        HorizontalAlignment = HAlignment.Center,
                        VerticalAlignment = VAlignment.Center,
                        HorizontalExpand = true,
                        FontColorOverride = StyleNano.DisabledFore,
                        Margin = new Thickness(0, 2, 0, 0),
                        MinHeight = 24f,
                    };

                    values2.AddChild(contaminant1);
                }

                else
                {
                    foreach ((var gas, (var mol, var percent, var alert)) in gasData)
                    {
                        var gasPercent = (FixedPoint2) 0f;
                        gasPercent = percent * 100f;

                        if (!GasSymbols.TryGetValue(gas, out var gasSymbol))
                            gasSymbol = "X";

                        var contaminant1 = new Label()
                        {
                            Text = Loc.GetString("atmos-monitoring-window-other-gases-value", ("shorthand", gasSymbol), ("value", gasPercent)),
                            HorizontalAlignment = HAlignment.Center,
                            VerticalAlignment = VAlignment.Center,
                            HorizontalExpand = true,
                            FontColorOverride = DetermineAlertColoration(alert),
                            Margin = new Thickness(0, 2, 0, 0),
                            MinHeight = 24f,
                            FontOverride = _displayFont,
                        };

                        values2.AddChild(contaminant1);
                    }
                }
            }

            else
            {
                var noData = new Label()
                {
                    Text = Loc.GetString("atmos-monitoring-window-no-data-available"),
                    HorizontalExpand = true,
                    HorizontalAlignment = HAlignment.Center,
                    Margin = new Thickness(0, 15),
                    FontOverride = font,
                    FontColorOverride = Color.DarkGray,
                };

                panel.AddChild(noData);
            }

            var silence = new CheckBox()
            {
                Text = Loc.GetString("atmos-monitoring-window-silence-alerts"),
                Pressed = console.SilencedAlerts.Contains(entry.Entity),
                HorizontalAlignment = HAlignment.Left,
                Margin = new Thickness(5, 5, 5, 5),
            };

            silence.Label.FontOverride = smallfont;
            silence.Label.FontColorOverride = Color.DarkGray;

            silence.OnToggled += _ => OnSilenceAlertsToggled(entry.Entity, silence.Pressed);

            panel.AddChild(silence);
        }
    }

    private Color DetermineAlertColoration(AtmosAlarmType alarmType)
    {
        switch (alarmType)
        {
            case AtmosAlarmType.Normal:
                return StyleNano.GoodGreenFore;
            case AtmosAlarmType.Warning:
                return StyleNano.ConcerningOrangeFore;
            case AtmosAlarmType.Danger:
                return StyleNano.DangerousRedFore;
        }

        return StyleNano.DisabledFore;
    }

    private void UpdateAlertsTable(NetEntity? currTrackedEntity, NetEntity? prevTrackedEntity)
    {
        foreach (var alert in AlertsTable.Children)
        {
            if (alert is not AtmosAlarmEntryContainer)
                continue;

            var castAlert = (AtmosAlarmEntryContainer) alert;

            if (castAlert.AirAlarmUid == prevTrackedEntity)
                castAlert.RemoveStyleClass(StyleNano.StyleClassButtonColorGreen);

            else if (castAlert.AirAlarmUid == currTrackedEntity)
                castAlert.AddStyleClass(StyleNano.StyleClassButtonColorGreen);

            if (castAlert?.Coordinates == null)
                continue;

            if (NavMap.TrackedEntities.TryGetValue(castAlert.AirAlarmUid, out var data))
            {
                data = new NavMapBlip
                    (data.Coordinates,
                    data.Texture,
                    (currTrackedEntity == null || castAlert.AirAlarmUid == currTrackedEntity) ? Color.LimeGreen : Color.LimeGreen * Color.DimGray,
                    castAlert.AirAlarmUid == currTrackedEntity);

                NavMap.TrackedEntities[castAlert.AirAlarmUid] = data;
            }
        }
    }

    private void SetTrackedEntityFromNavMap(NetEntity? netEntity)
    {
        if (netEntity == null)
            return;

        _trackedEntity = netEntity;

        // Get the scroll position of the selected entity on the selected button the UI
        ActivateAutoScrollToFocus();

        // Send message to console that the focus has changed
        SendAtmosMonitoringConsoleMessageAction?.Invoke(_trackedEntity);
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        AutoScrollToFocus();

        // Warning sign pulse        
        //var lit = _gameTiming.RealTime.TotalSeconds % BlinkFrequency > BlinkFrequency / 2f;
        //SystemWarningPanel.Modulate = lit ? Color.White : new Color(178, 178, 178);
    }

    private void ActivateAutoScrollToFocus()
    {
        _autoScrollActive = false;
        _autoScrollAwaitsUpdate = true;
    }

    private void AutoScrollToFocus()
    {
        if (!_autoScrollActive)
            return;

        var scroll = MasterTabContainer.Children.ElementAt(MasterTabContainer.CurrentTab) as ScrollContainer;
        if (scroll == null)
            return;

        if (!TryGetVerticalScrollbar(scroll, out var vScrollbar))
            return;

        if (!TryGetNextScrollPosition(out float? nextScrollPosition))
            return;

        vScrollbar.ValueTarget = nextScrollPosition.Value;

        if (MathHelper.CloseToPercent(vScrollbar.Value, vScrollbar.ValueTarget))
            _autoScrollActive = false;
    }

    private bool TryGetVerticalScrollbar(ScrollContainer scroll, [NotNullWhen(true)] out VScrollBar? vScrollBar)
    {
        vScrollBar = null;

        foreach (var child in scroll.Children)
        {
            if (child is not VScrollBar)
                continue;

            var castChild = child as VScrollBar;

            if (castChild != null)
            {
                vScrollBar = castChild;
                return true;
            }
        }

        return false;
    }

    private bool TryGetNextScrollPosition([NotNullWhen(true)] out float? nextScrollPosition)
    {
        nextScrollPosition = null;

        var scroll = MasterTabContainer.Children.ElementAt(MasterTabContainer.CurrentTab) as ScrollContainer;
        if (scroll == null)
            return false;

        var container = scroll.Children.ElementAt(0) as BoxContainer;
        if (container == null || container.Children.Count() == 0)
            return false;

        // Exit if the heights of the children haven't been initialized yet
        if (!container.Children.Any(x => x.Height > 0))
            return false;

        nextScrollPosition = 0;

        foreach (var control in container.Children)
        {
            if (control == null || control is not AtmosAlarmEntryContainer)
                continue;

            if (((AtmosAlarmEntryContainer) control).AirAlarmUid == _trackedEntity)
                return true;

            nextScrollPosition += control.Height;
        }

        // Failed to find control
        nextScrollPosition = null;

        return false;
    }

    private Color ChangeColorBrightness(Color color, float factor)
    {
        var r = MathF.Min(color.R * factor, 1f);
        var g = MathF.Min(color.G * factor, 1f);
        var b = MathF.Min(color.B * factor, 1f);

        return new Color(r, g, b);
    }
}

public sealed class AtmosAlarmEntryContainer : BoxContainer
{
    public NetEntity AirAlarmUid;
    public EntityCoordinates? Coordinates;
}
