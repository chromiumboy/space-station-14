using Content.Client.Message;
using Content.Client.Pinpointer.UI;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Shared.Atmos.Components;
using Content.Shared.Atmos.Monitor;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Player;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;
using Robust.Shared.Timing;
using Robust.Shared.Utility;
using System.Diagnostics.CodeAnalysis;
using System.Linq;

namespace Content.Client.Atmos.Console;

[GenerateTypedNameReferences]
public sealed partial class AtmosMonitoringConsoleWindow : FancyWindow
{
    private readonly IEntityManager _entManager;
    private readonly SpriteSystem _spriteSystem;

    private EntityUid? _owner;
    private NetEntity? _trackedEntity;

    private AtmosMonitoringConsoleEntry[]? _allAlarms = null;
    private IEnumerable<AtmosMonitoringConsoleEntry>? _activeAlarms = null;
    private Dictionary<NetEntity, float> _deviceSilencingProgress = new();

    public event Action<NetEntity?>? SendFocusChangeMessageAction;
    public event Action<NetEntity, bool>? SendDeviceSilencedMessageAction;

    private bool _autoScrollActive = false;
    private bool _autoScrollAwaitsUpdate = false;

    private const float SilencingDuration = 2.5f;

    private Dictionary<AtmosMonitoringConsoleGroup, (SpriteSpecifier.Texture, Color)> _groupBlips = new()
    {
        { AtmosMonitoringConsoleGroup.GasVentPump, (new SpriteSpecifier.Texture(new ResPath("/Textures/Interface/NavMap/beveled_square.png")), Color.DarkGray) },
        { AtmosMonitoringConsoleGroup.GasVentScrubber, (new SpriteSpecifier.Texture(new ResPath("/Textures/Interface/NavMap/beveled_circle.png")), Color.DarkGray) },
        { AtmosMonitoringConsoleGroup.AirAlarm, (new SpriteSpecifier.Texture(new ResPath("/Textures/Interface/NavMap/beveled_star.png")), Color.White) },
    };

    public AtmosMonitoringConsoleWindow(AtmosMonitoringConsoleBoundUserInterface userInterface, EntityUid? owner)
    {
        RobustXamlLoader.Load(this);
        _entManager = IoCManager.Resolve<IEntityManager>();
        _spriteSystem = _entManager.System<SpriteSystem>();

        // Pass the owner to nav map
        _owner = owner;
        NavMap.Owner = _owner;

        // Set nav map grid uid
        var stationName = Loc.GetString("atmos-monitoring-window-unknown-location");

        if (_entManager.TryGetComponent<TransformComponent>(owner, out var xform))
        {
            NavMap.MapUid = xform.GridUid;

            // Assign station name      
            if (_entManager.TryGetComponent<MetaDataComponent>(xform.GridUid, out var stationMetaData))
                stationName = stationMetaData.EntityName;

            var msg = new FormattedMessage();
            msg.AddMarkup(Loc.GetString("atmos-monitoring-window-station-name", ("stationName", stationName)));

            StationName.SetMessage(msg);
        }

        else
        {
            StationName.SetMessage(stationName);
            NavMap.Visible = false;
        }

        // Set trackable entity selected action
        NavMap.TrackedEntitySelectedAction += SetTrackedEntityFromNavMap;

        // Update nav map
        NavMap.ForceNavMapUpdate();

        // Set tab container headers
        MasterTabContainer.SetTabTitle(0, Loc.GetString("atmos-monitoring-window-tab-no-alerts"));
        MasterTabContainer.SetTabTitle(1, Loc.GetString("atmos-monitoring-window-tab-air-alarms"));

        // Set UI toggles
        ShowPipeNetwork.OnToggled += _ => OnShowPipeNetworkToggled();
        ShowInactiveAirAlarms.OnToggled += _ => OnInactiveAirAlarmsToggled();

        // Set atmos monitoring message action
        SendFocusChangeMessageAction += userInterface.SendFocusChangeMessage;
        SendDeviceSilencedMessageAction += userInterface.SendDeviceSilencedMessage;
    }

    #region Toggle handling

    private void OnShowPipeNetworkToggled()
    {
        if (_owner == null)
            return;

        if (!_entManager.TryGetComponent<AtmosMonitoringConsoleComponent>(_owner.Value, out var console))
            return;

        NavMap.ShowPipeNetwork = ShowPipeNetwork.Pressed;

        foreach (var device in console.AtmosDevices)
        {
            if (device.Group == AtmosMonitoringConsoleGroup.AirAlarm)
                continue;

            if (ShowPipeNetwork.Pressed)
                AddTrackedEntityToNavMap(device);

            else
                NavMap.TrackedEntities.Remove(device.NetEntity);
        }
    }

    private void OnInactiveAirAlarmsToggled()
    {
        if (_owner == null)
            return;

        if (!_entManager.TryGetComponent<AtmosMonitoringConsoleComponent>(_owner.Value, out var console))
            return;

        if (_allAlarms == null)
            return;

        foreach (var device in console.AtmosDevices)
        {
            if (device.Group != AtmosMonitoringConsoleGroup.AirAlarm)
                continue;

            if (ShowInactiveAirAlarms.Pressed)
                AddTrackedEntityToNavMap(device, _allAlarms);

            else if (_allAlarms.FirstOrNull(x => x.NetEntity == device.NetEntity && x.AlarmState <= AtmosAlarmType.Normal) != null)
                NavMap.TrackedEntities.Remove(device.NetEntity);
        }
    }

    private void OnSilenceAlertsToggled(NetEntity netEntity, bool toggleState)
    {
        if (!_entManager.TryGetComponent<AtmosMonitoringConsoleComponent>(_owner, out var console))
            return;

        if (toggleState)
        {
            console.SilencedDevices.Add(netEntity);
            _deviceSilencingProgress[netEntity] = SilencingDuration;
        }

        else
        {
            console.SilencedDevices.Remove(netEntity);
            _deviceSilencingProgress.Remove(netEntity);
        }

        // Update values and UI elements
        foreach (AtmosAlarmEntryContainer entryContainer in AlertsTable.Children)
        {
            if (entryContainer.NetEntity == netEntity)
                entryContainer.SilenceAlarmProgressBar.Visible = toggleState;
        }

        SendDeviceSilencedMessageAction?.Invoke(netEntity, toggleState);
    }

    #endregion

    public void UpdateUI(EntityCoordinates? consoleCoords, AtmosMonitoringConsoleEntry[] allAlarms, AtmosFocusDeviceData? focusData)
    {
        if (_owner == null)
            return;

        if (!_entManager.TryGetComponent<AtmosMonitoringConsoleComponent>(_owner.Value, out var console))
            return;

        if (_trackedEntity != focusData?.NetEntity)
        {
            SendFocusChangeMessageAction?.Invoke(_trackedEntity);
            focusData = null;
        }

        // Retain alarm data for use between updates
        _allAlarms = allAlarms;
        _activeAlarms = allAlarms.Where(x => x.AlarmState > AtmosAlarmType.Normal &&
            (!console.SilencedDevices.Contains(x.NetEntity) || _deviceSilencingProgress.ContainsKey(x.NetEntity)));

        // Reset nav map values
        NavMap.TrackedCoordinates.Clear();
        NavMap.TrackedEntities.Clear();

        // Add tracked entities to the nav map
        foreach (var datum in console.AtmosDevices)
        {
            if (!NavMap.Visible)
                continue;

            if (_trackedEntity != datum.NetEntity)
            {
                // Skip inactive air alarms if the appropriate overlay is off
                if (!ShowInactiveAirAlarms.Pressed &&
                    datum.Group == AtmosMonitoringConsoleGroup.AirAlarm &&
                    !_activeAlarms.Any(x => x.NetEntity == datum.NetEntity))
                    continue;

                // Skip atmos devices if the pipe network is toggled off
                if (!ShowPipeNetwork.Pressed &&
                    datum.Group != AtmosMonitoringConsoleGroup.AirAlarm)
                    continue;
            }

            AddTrackedEntityToNavMap(datum, allAlarms);
        }

        // Show the monitor location
        var consoleUid = _entManager.GetNetEntity(_owner);

        if (consoleCoords != null && consoleUid != null)
        {
            var texture = _spriteSystem.Frame0(new SpriteSpecifier.Texture(new ResPath("/Textures/Interface/NavMap/beveled_circle.png")));
            var blip = new NavMapBlip(consoleCoords.Value, texture, Color.Cyan, true, false);
            NavMap.TrackedEntities[consoleUid.Value] = blip;
        }

        // Update the nav map
        NavMap.ForceNavMapUpdate();

        // Clear excess children from the tables
        var activeAlarmCount = _activeAlarms.Count();

        while (AlertsTable.ChildCount > activeAlarmCount)
            AlertsTable.RemoveChild(AlertsTable.GetChild(AlertsTable.ChildCount - 1));

        while (AirAlarmsTable.ChildCount > allAlarms.Length)
            AirAlarmsTable.RemoveChild(AirAlarmsTable.GetChild(AirAlarmsTable.ChildCount - 1));

        // Update all entries in each table
        for (int index = 0; index < _activeAlarms.Count(); index++)
        {
            var entry = _activeAlarms.ElementAt(index);
            UpdateUIEntry(entry, index, AlertsTable, console, focusData);
        }

        for (int index = 0; index < allAlarms.Count(); index++)
        {
            var entry = allAlarms.ElementAt(index);
            UpdateUIEntry(entry, index, AirAlarmsTable, console, focusData);
        }

        // If no alerts are active, display a message
        if (MasterTabContainer.CurrentTab == 0 && activeAlarmCount == 0)
        {
            var label = new RichTextLabel()
            {
                HorizontalExpand = true,
                VerticalExpand = true,
                HorizontalAlignment = HAlignment.Center,
                VerticalAlignment = VAlignment.Center,
            };

            label.SetMarkup(Loc.GetString("atmos-monitoring-window-no-active-alerts", ("color", StyleNano.GoodGreenFore.ToHexNoAlpha())));

            AlertsTable.AddChild(label);
        }

        // Update the alerts tab with the number of active alerts
        if (activeAlarmCount == 0)
            MasterTabContainer.SetTabTitle(0, Loc.GetString("atmos-monitoring-window-tab-no-alerts"));

        else
            MasterTabContainer.SetTabTitle(0, Loc.GetString("atmos-monitoring-window-tab-alerts", ("value", activeAlarmCount)));

        // Auto-scroll re-enable
        if (_autoScrollAwaitsUpdate)
        {
            _autoScrollActive = true;
            _autoScrollAwaitsUpdate = false;
        }
    }

    private void AddTrackedEntityToNavMap(AtmosDeviceNavMapData metaData, AtmosMonitoringConsoleEntry[]? allAlarms = null)
    {
        if (!_groupBlips.TryGetValue(metaData.Group, out var data))
            return;

        var coords = _entManager.GetCoordinates(metaData.NetCoordinates);
        var texture = data.Item1;
        var color = (metaData.Color != null) ? metaData.Color * data.Item2 : data.Item2;

        if (color == null)
            color = Color.White;

        if (allAlarms != null && metaData.Group == AtmosMonitoringConsoleGroup.AirAlarm)
        {
            foreach (var alarm in allAlarms)
            {
                if (alarm.NetEntity == metaData.NetEntity)
                    color = (alarm.AlarmState >= AtmosAlarmType.Warning) ? new Color(255, 205, 0) : Color.LimeGreen;
            }

            if (_trackedEntity != null && _trackedEntity != metaData.NetEntity)
                color = color.Value * Color.DimGray;
        }

        var selectable = (metaData.Group == AtmosMonitoringConsoleGroup.AirAlarm);

        var blip = new NavMapBlip(coords, _spriteSystem.Frame0(texture), color!.Value, _trackedEntity == metaData.NetEntity, selectable);

        if (metaData.Group != AtmosMonitoringConsoleGroup.AirAlarm)
        {
            blip.ScalingCoefficient = 0.015f;
            blip.ScalingType = NavMapBlipScaling.Linear;
        }

        NavMap.TrackedEntities[metaData.NetEntity] = blip;
    }

    private void UpdateUIEntry(AtmosMonitoringConsoleEntry entry, int index, Control table, AtmosMonitoringConsoleComponent console, AtmosFocusDeviceData? focusData = null)
    {
        // Make new UI entry if required
        if (index >= table.ChildCount)
        {
            var newEntryContainer = new AtmosAlarmEntryContainer(entry.NetEntity, _entManager.GetCoordinates(entry.Coordinates));

            // On click
            newEntryContainer.FocusButton.OnButtonUp += args =>
            {
                var prevTrackedEntity = _trackedEntity;

                if (_trackedEntity == entry.NetEntity)
                {
                    _trackedEntity = null;
                }

                else
                {
                    _trackedEntity = newEntryContainer.NetEntity;
                    NavMap.CenterToCoordinates(_entManager.GetCoordinates(entry.Coordinates));
                }

                // Send message to console that the focus has changed
                SendFocusChangeMessageAction?.Invoke(_trackedEntity);

                // Update both tables
                UpdateConsoleTable(console, AlertsTable, _trackedEntity, prevTrackedEntity);
                UpdateConsoleTable(console, AirAlarmsTable, _trackedEntity, prevTrackedEntity);
            };

            // On toggling the silence check box
            newEntryContainer.SilenceCheckBox.OnToggled += _ => OnSilenceAlertsToggled(entry.NetEntity, newEntryContainer.SilenceCheckBox.Pressed);

            // Add the entry to the current table
            table.AddChild(newEntryContainer);
        }

        // Update values and UI elements
        var tableChild = table.GetChild(index);

        if (tableChild is not AtmosAlarmEntryContainer)
            return;

        var entryContainer = tableChild as AtmosAlarmEntryContainer;

        if (entryContainer == null)
            return;

        entryContainer.UpdateEntry(entry, focusData);
        entryContainer.SilenceCheckBox.Pressed = console.SilencedDevices.Contains(entry.NetEntity);
        entryContainer.SilenceAlarmProgressBar.Visible = (table == AlertsTable && _deviceSilencingProgress.ContainsKey(entry.NetEntity));
    }

    private void UpdateConsoleTable(AtmosMonitoringConsoleComponent console, Control table, NetEntity? currTrackedEntity, NetEntity? prevTrackedEntity)
    {
        foreach (var child in table.Children)
        {
            if (child is not AtmosAlarmEntryContainer)
                continue;

            var castAlert = (AtmosAlarmEntryContainer) child;

            if (castAlert.NetEntity == prevTrackedEntity)
                castAlert.RemoveAsFocus();

            else if (castAlert.NetEntity == currTrackedEntity)
                castAlert.SetAsFocus();

            if (castAlert?.Coordinates == null)
                continue;

            var metaData = console.AtmosDevices.FirstOrNull(x => x.NetEntity == castAlert.NetEntity);

            if (metaData == null)
                continue;

            if (currTrackedEntity != metaData.Value.NetEntity &&
                !ShowInactiveAirAlarms.Pressed &&
                (_activeAlarms == null || !_activeAlarms.Any(x => x.NetEntity == metaData.Value.NetEntity)))
                continue;

            AddTrackedEntityToNavMap(metaData.Value, _allAlarms);
        }
    }

    private void SetTrackedEntityFromNavMap(NetEntity? netEntity)
    {
        if (netEntity == null)
            return;

        _trackedEntity = netEntity;

        // Get the scroll position of the selected entity on the selected button the UI
        ActivateAutoScrollToFocus();

        // Send message to console that the focus has changed
        SendFocusChangeMessageAction?.Invoke(_trackedEntity);
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        AutoScrollToFocus();

        // Device silencing update
        foreach ((var device, var remainingTime) in _deviceSilencingProgress)
        {
            var t = remainingTime - args.DeltaSeconds;

            if (t <= 0)
                _deviceSilencingProgress.Remove(device);

            else
                _deviceSilencingProgress[device] = t;
        }
    }

    private void ActivateAutoScrollToFocus()
    {
        _autoScrollActive = false;
        _autoScrollAwaitsUpdate = true;
    }

    private void AutoScrollToFocus()
    {
        if (!_autoScrollActive)
            return;

        var scroll = MasterTabContainer.Children.ElementAt(MasterTabContainer.CurrentTab) as ScrollContainer;
        if (scroll == null)
            return;

        if (!TryGetVerticalScrollbar(scroll, out var vScrollbar))
            return;

        if (!TryGetNextScrollPosition(out float? nextScrollPosition))
            return;

        vScrollbar.ValueTarget = nextScrollPosition.Value;

        if (MathHelper.CloseToPercent(vScrollbar.Value, vScrollbar.ValueTarget))
            _autoScrollActive = false;
    }

    private bool TryGetVerticalScrollbar(ScrollContainer scroll, [NotNullWhen(true)] out VScrollBar? vScrollBar)
    {
        vScrollBar = null;

        foreach (var child in scroll.Children)
        {
            if (child is not VScrollBar)
                continue;

            var castChild = child as VScrollBar;

            if (castChild != null)
            {
                vScrollBar = castChild;
                return true;
            }
        }

        return false;
    }

    private bool TryGetNextScrollPosition([NotNullWhen(true)] out float? nextScrollPosition)
    {
        nextScrollPosition = null;

        var scroll = MasterTabContainer.Children.ElementAt(MasterTabContainer.CurrentTab) as ScrollContainer;
        if (scroll == null)
            return false;

        var container = scroll.Children.ElementAt(0) as BoxContainer;
        if (container == null || container.Children.Count() == 0)
            return false;

        // Exit if the heights of the children haven't been initialized yet
        if (!container.Children.Any(x => x.Height > 0))
            return false;

        nextScrollPosition = 0;

        foreach (var control in container.Children)
        {
            if (control == null || control is not AtmosAlarmEntryContainer)
                continue;

            if (((AtmosAlarmEntryContainer) control).NetEntity == _trackedEntity)
                return true;

            nextScrollPosition += control.Height;
        }

        // Failed to find control
        nextScrollPosition = null;

        return false;
    }
}
