using Content.Client.Message;
using Content.Client.Pinpointer.UI;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Shared.Atmos.Components;
using Content.Shared.Atmos.Monitor.Components;
using Content.Shared.FixedPoint;
using Content.Shared.Power;
using Content.Shared.Temperature;
using Microsoft.CodeAnalysis;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.RichText;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;
using Robust.Shared.Timing;
using Robust.Shared.Toolshed.Syntax;
using Robust.Shared.Utility;
using System.Linq;
using Content.Shared.Atmos.Monitor;
using Content.Shared.Atmos;

namespace Content.Client.Atmos.Console;

[GenerateTypedNameReferences]
public sealed partial class AtmosMonitoringConsoleWindow : FancyWindow
{
    private readonly IEntityManager _entManager;
    private readonly SpriteSystem _spriteSystem;
    private readonly IGameTiming _gameTiming;

    private IResourceCache _cache;

    private const float BlinkFrequency = 1f;

    private EntityUid? _owner;
    private NetEntity? _trackedEntity;

    public event Action<NetEntity?>? SendAtmosMonitoringConsoleMessageAction;

    private Dictionary<AtmosMonitoringConsoleGroup, (SpriteSpecifier.Texture, Color)> _groupBlips = new()
    {
        { AtmosMonitoringConsoleGroup.GasVentPump, (new SpriteSpecifier.Texture(new ResPath("/Textures/Interface/NavMap/beveled_square.png")), Color.Gray) },
        { AtmosMonitoringConsoleGroup.GasVentScrubber, (new SpriteSpecifier.Texture(new ResPath("/Textures/Interface/NavMap/beveled_circle.png")), Color.Gray) },
        { AtmosMonitoringConsoleGroup.AirSensor, (new SpriteSpecifier.Texture(new ResPath("/Textures/Interface/NavMap/beveled_diamond.png")), Color.LimeGreen) },
        { AtmosMonitoringConsoleGroup.AirAlarm, (new SpriteSpecifier.Texture(new ResPath("/Textures/Interface/NavMap/beveled_star.png")), Color.Magenta) },
    };

    public AtmosMonitoringConsoleWindow(AtmosMonitoringConsoleBoundUserInterface userInterface, EntityUid? owner)
    {
        RobustXamlLoader.Load(this);
        _entManager = IoCManager.Resolve<IEntityManager>();
        _gameTiming = IoCManager.Resolve<IGameTiming>();
        _cache = IoCManager.Resolve<IResourceCache>();

        _spriteSystem = _entManager.System<SpriteSystem>();
        _owner = owner;

        // Pass owner to nav map
        NavMap.Owner = _owner;

        // Set nav map grid uid
        var stationName = Loc.GetString("atmos-monitoring-window-unknown-location");

        if (_entManager.TryGetComponent<TransformComponent>(owner, out var xform))
        {
            NavMap.MapUid = xform.GridUid;

            // Assign station name      
            if (_entManager.TryGetComponent<MetaDataComponent>(xform.GridUid, out var stationMetaData))
                stationName = stationMetaData.EntityName;

            var msg = new FormattedMessage();
            msg.AddMarkup(Loc.GetString("atmos-monitoring-window-station-name", ("stationName", stationName)));

            StationName.SetMessage(msg);
        }

        else
        {
            StationName.SetMessage(stationName);
            NavMap.Visible = false;
        }

        // Set trackable entity selected action
        //NavMap.TrackedEntitySelectedAction += SetTrackedEntityFromNavMap;

        // Update nav map
        NavMap.ForceNavMapUpdate();

        MasterTabContainer.SetTabTitle(0, Loc.GetString("Alerts"));
        MasterTabContainer.SetTabTitle(1, Loc.GetString("Air alarms"));

        // Track when the MasterTabContainer changes its tab
        //MasterTabContainer.OnTabChanged += OnTabChanged;

        // Set UI toggles
        //ShowHVCable.OnToggled += _ => OnShowCableToggled(PowerMonitoringConsoleLineGroup.HighVoltage);
        //ShowMVCable.OnToggled += _ => OnShowCableToggled(PowerMonitoringConsoleLineGroup.MediumVoltage);
        //ShowLVCable.OnToggled += _ => OnShowCableToggled(PowerMonitoringConsoleLineGroup.Apc);

        // Set power monitoring message action
        SendAtmosMonitoringConsoleMessageAction += userInterface.SendAtmosMonitoringConsoleMessage;
    }

    private void OnTabChanged(int tab)
    {
        //SendAtmosMonitoringConsoleMessageAction?.Invoke(_focusEntity);
    }

    /*private void OnShowCableToggled(PowerMonitoringConsoleLineGroup lineGroup)
    {
        if (!NavMap.HiddenLineGroups.Remove(lineGroup))
            NavMap.HiddenLineGroups.Add(lineGroup);
    }*/

    public void ShowEntites(EntityCoordinates? monitorCoords, AtmosAlarmEntry[] activeAlarms, AtmosMonitorFocusDeviceData? focusData)
    {
        if (_owner == null)
            return;

        if (!_entManager.TryGetComponent<AtmosMonitoringConsoleComponent>(_owner.Value, out var console))
            return;

        if (_trackedEntity != focusData?.NetEntity)
        {
            SendAtmosMonitoringConsoleMessageAction?.Invoke(_trackedEntity);
            focusData = null;
        }

        // Reset nav map values
        NavMap.TrackedCoordinates.Clear();
        NavMap.TrackedEntities.Clear();

        //
        foreach (var datum in console.AtmosMonitors)
        {
            if (NavMap.Visible)
                AddTrackedEntityToNavMap(datum);
        }

        // Show monitor location
        var mon = _entManager.GetNetEntity(_owner);

        if (monitorCoords != null && mon != null)
        {
            var texture = _spriteSystem.Frame0(new SpriteSpecifier.Texture(new ResPath("/Textures/Interface/NavMap/beveled_circle.png")));
            var blip = new NavMapBlip(monitorCoords.Value, texture, Color.Cyan, true, false);
            NavMap.TrackedEntities[mon.Value] = blip;
        }

        AlertsTable.RemoveAllChildren();

        foreach (var entry in activeAlarms)
        {
            MakeNewAlarmEntry(entry, focusData);
        }

        // Update nav map
        NavMap.ForceNavMapUpdate();
    }

    private void AddTrackedEntityToNavMap(AtmosMonitorData metaData)
    {
        if (!_groupBlips.TryGetValue(metaData.Group, out var data))
            return;

        var coords = _entManager.GetCoordinates(metaData.NetCoordinates);
        var texture = data.Item1;
        var color = (metaData.Color != null) ? metaData.Color : data.Item2;

        var blip = new NavMapBlip(coords, _spriteSystem.Frame0(texture), color.Value, false);
        NavMap.TrackedEntities[metaData.NetEntity] = blip;
    }

    private void MakeNewAlarmEntry(AtmosAlarmEntry entry, AtmosMonitorFocusDeviceData? focusData = null)
    {
        var mainContainer = new BoxContainer()
        {
            Orientation = BoxContainer.LayoutOrientation.Vertical,
            HorizontalExpand = true,
            Margin = new Thickness(0, 0, 0, 3),
        };

        AlertsTable.AddChild(mainContainer);

        var button = new AtmosAlertButton()
        {
            HorizontalExpand = true,
            SetHeight = 32,
            Margin = new Thickness(12, 0, 0, 0),
        };

        button.StyleClasses.Add("OpenBoth");
        button.AirAlarmUid = entry.Entity;

        button.OnButtonUp += args =>
        {
            var prevTrackedEntity = _trackedEntity;

            if (_trackedEntity == entry.Entity)
            {
                _trackedEntity = null;
            }

            else
            {
                _trackedEntity = entry.Entity;
                NavMap.CenterToCoordinates(_entManager.GetCoordinates(entry.Coordinates));
            }

            //NavMap.Focus = _trackedEntity;

            // Send message to console that the focus has changed
            SendAtmosMonitoringConsoleMessageAction?.Invoke(_trackedEntity);

            UpdateAlertsTable(_trackedEntity, prevTrackedEntity);
        };

        mainContainer.AddChild(button);

        var control = new BoxContainer()
        {
            HorizontalExpand = true,
            VerticalExpand = true,
            Orientation = BoxContainer.LayoutOrientation.Horizontal,
        };

        button.AddChild(control);

        /*var backing = new PanelContainer()
        {
            SetWidth = 120f,
            SetHeight = 32,
            HorizontalAlignment = HAlignment.Left,
            Margin = new Thickness(-10f, -2f, 0f, -2f),
            PanelOverride = new StyleBoxFlat
            {
                BackgroundColor = new Color(32, 32, 35),
            },
        };*/

        var backing = new TextureRect()
        {
            //SetWidth = 120f,
            //SetHeight = 32,
            Stretch = TextureRect.StretchMode.Keep,
            HorizontalAlignment = HAlignment.Left,
            TexturePath = "/Textures/Interface/AtmosMonitoring/status_bg.png",
            Margin = new Thickness(-20, -2, 0, 0),
            ModulateSelfOverride = new Color(37, 37, 42),
        };

        control.AddChild(backing);

        var backingContainer = new BoxContainer()
        {
            VerticalExpand = true,
            HorizontalExpand = true,
            Orientation = BoxContainer.LayoutOrientation.Horizontal,
            Margin = new Thickness(8, 0),
        };

        backing.AddChild(backingContainer);

        var arrow = new TextureRect()
        {
            VerticalAlignment = VAlignment.Center,
            SetSize = new System.Numerics.Vector2(12f, 12f),
            Stretch = TextureRect.StretchMode.KeepAspectCentered,
            Margin = new Thickness(3, 0),
        };

        if (entry.Entity == _trackedEntity)
        {
            button.AddStyleClass(StyleNano.StyleClassButtonColorGreen);
            arrow.TexturePath = "/Textures/Interface/Nano/inverted_triangle.svg.png";
        }

        else
        {
            arrow.TexturePath = "/Textures/Interface/Nano/triangle_right.png";
        }

        backingContainer.AddChild(arrow);
        
        var state = new Label()
        {
            Text = entry.AlarmState.ToString(),
            HorizontalExpand = true,
            HorizontalAlignment = HAlignment.Center,
            //Margin = new Thickness(8, 0),
            FontColorOverride = DetermineAlertColoration(entry.AlarmState),
        };

        backingContainer.AddChild(state);

        var name = new Label()
        {
            Text = "Air alarm (" + entry.Address + ")",
            HorizontalExpand = true,
            HorizontalAlignment = HAlignment.Center,
            Margin = new Thickness(5, 0),
        };

        control.AddChild(name);

        if (focusData?.NetEntity == entry.Entity)
        {
            var font = new VectorFont(_cache.GetResource<FontResource>("/Fonts/NotoSans/NotoSans-Bold.ttf"), 11);

            var panelback = new PanelContainer()
            {
                HorizontalExpand = true,
                PanelOverride = new StyleBoxFlat
                {
                    BackgroundColor = new Color(37, 37, 42),
                },
                Margin = new Thickness(1, -1, 1, 0),
            };

            mainContainer.AddChild(panelback);

            var panel = new BoxContainer()
            {
                HorizontalExpand = true,
                VerticalExpand = true,
                Orientation = BoxContainer.LayoutOrientation.Vertical,
            };

            panelback.AddChild(panel);

            var labelPanel = new PanelContainer()
            {
                HorizontalExpand = true,
                PanelOverride = new StyleBoxFlat
                {
                    //BackgroundColor = new Color(32, 32, 35),
                    BackgroundColor = new Color(37, 37, 42),
                },
            };

            panel.AddChild(labelPanel);

            var labels = new BoxContainer()
            {
                HorizontalExpand = true,
                VerticalExpand = true,
                Orientation = BoxContainer.LayoutOrientation.Horizontal,
            };

            labelPanel.AddChild(labels);

            var temperature = new Label()
            {
                Text = "Temperature",
                HorizontalAlignment = HAlignment.Center,
                VerticalAlignment = VAlignment.Center,
                HorizontalExpand = true,
                FontOverride = font,
                FontColorOverride = Color.DarkGray,
                Margin = new Thickness(0, 2, 0, 0),
                SetHeight = 24f,
            };

            labels.AddChild(temperature);

            var pressure = new Label()
            {
                Text = "Pressure",
                HorizontalAlignment = HAlignment.Center,
                VerticalAlignment = VAlignment.Center,
                HorizontalExpand = true,
                FontOverride = font,
                FontColorOverride = Color.DarkGray,
                Margin = new Thickness(0, 2, 0, 0),
                SetHeight = 24f,
            };

            labels.AddChild(pressure);

            var oxygen = new Label()
            {
                Text = "Air mixture",
                HorizontalAlignment = HAlignment.Center,
                VerticalAlignment = VAlignment.Center,
                HorizontalExpand = true,
                FontOverride = font,
                FontColorOverride = Color.DarkGray,
                Margin = new Thickness(0, 2, 0, 0),
                SetHeight = 24f,
            };

            labels.AddChild(oxygen);

            var valuePanel = new PanelContainer()
            {
                HorizontalExpand = true,
                PanelOverride = new StyleBoxFlat
                {
                    BackgroundColor = new Color(32, 32, 35),
                    //BackgroundColor = new Color(37, 37, 42),
                },
            };

            panel.AddChild(valuePanel);

            var values = new BoxContainer()
            {
                HorizontalExpand = true,
                VerticalExpand = true,
                Orientation = BoxContainer.LayoutOrientation.Horizontal,
            };

            valuePanel.AddChild(values);

            var tempK = MathF.Ceiling(focusData.Value.TemperatureData.Item1);
            var tempC = MathF.Ceiling(TemperatureHelpers.KelvinToCelsius(tempK));

            var temperatureValue = new Label()
            {
                Text = tempC + " °C (" + tempK + " K)",
                HorizontalAlignment = HAlignment.Center,
                VerticalAlignment = VAlignment.Bottom,
                HorizontalExpand = true,
                FontColorOverride = DetermineAlertColoration(focusData.Value.TemperatureData.Item2),
                Margin = new Thickness(0, 2, 0, 0),
                MinHeight = 24f,
            };

            values.AddChild(temperatureValue);

            var pressureValue = new Label()
            {
                Text = MathF.Ceiling(focusData.Value.PressureData.Item1).ToString() + " kPa",
                HorizontalAlignment = HAlignment.Center,
                VerticalAlignment = VAlignment.Bottom,
                HorizontalExpand = true,
                FontColorOverride = DetermineAlertColoration(focusData.Value.PressureData.Item2),
                Margin = new Thickness(0, 2, 0, 0),
                MinHeight = 24f,
            };

            values.AddChild(pressureValue);

            var oxygenPercent = 0f;
            var nitrogenPrecent = 0f;
            var nitrogenoxygenAlert = AtmosAlarmType.Normal;
            var nitrogenoxygenColor = StyleNano.DisabledFore;

            if (focusData.Value.GasData.TryGetValue(Gas.Oxygen, out var oxygenData))
            {
                oxygenPercent = MathF.Ceiling(oxygenData.Item2 * 100f);

                if ((int) oxygenData.Item3 > (int) nitrogenoxygenAlert)
                    nitrogenoxygenAlert = oxygenData.Item3;
            }

            if (focusData.Value.GasData.TryGetValue(Gas.Nitrogen, out var nitrogenData))
            {
                nitrogenPrecent = MathF.Ceiling(nitrogenData.Item2 * 100f);

                if ((int) nitrogenData.Item3 > (int) nitrogenoxygenAlert)
                    nitrogenoxygenAlert = nitrogenData.Item3;
            }

            var oxygenValue = new Label()
            {
                Text = "N2 (" + nitrogenPrecent + "%) : O2 (" + oxygenPercent + "%)",
                HorizontalAlignment = HAlignment.Center,
                VerticalAlignment = VAlignment.Bottom,
                HorizontalExpand = true,
                FontColorOverride = DetermineAlertColoration(nitrogenoxygenAlert),
                Margin = new Thickness(0, 2, 0, 0),
                MinHeight = 24f,
            };

            values.AddChild(oxygenValue);


            //

            var labelPanel2 = new PanelContainer()
            {
                HorizontalExpand = true,
                PanelOverride = new StyleBoxFlat
                {
                    //BackgroundColor = new Color(32, 32, 35),
                    BackgroundColor = new Color(37, 37, 42),
                },
            };

            panel.AddChild(labelPanel2);

            var labels2 = new BoxContainer()
            {
                HorizontalExpand = true,
                VerticalExpand = true,
                Orientation = BoxContainer.LayoutOrientation.Horizontal,
            };

            labelPanel2.AddChild(labels2);

            var contaminants = new Label()
            {
                Text = "Other gases",
                HorizontalExpand = true,
                HorizontalAlignment = HAlignment.Center,
                VerticalAlignment = VAlignment.Center,
                FontOverride = font,
                FontColorOverride = Color.DarkGray,
                Margin = new Thickness(0, 4, 0, 0),
                MinHeight = 24f,
            };

            labels2.AddChild(contaminants);

            var valuePanel2 = new PanelContainer()
            {
                HorizontalExpand = true,
                PanelOverride = new StyleBoxFlat
                {
                    BackgroundColor = new Color(32, 32, 35),
                    //BackgroundColor = new Color(37, 37, 42),
                },
            };

            panel.AddChild(valuePanel2);

            var values2 = new GridContainer()
            {
                HorizontalExpand = true,
                VerticalExpand = true,
                Columns = 3,
            };

            valuePanel2.AddChild(values2);

            var gasData = focusData.Value.GasData.Where(g => g.Key != Gas.Oxygen && g.Key != Gas.Nitrogen);

            if (gasData.Count() == 0)
            {
                var contaminant1 = new Label()
                {
                    Text = "-",
                    HorizontalAlignment = HAlignment.Center,
                    VerticalAlignment = VAlignment.Center,
                    HorizontalExpand = true,
                    FontColorOverride = StyleNano.DisabledFore,
                    Margin = new Thickness(0, 2, 0, 0),
                    MinHeight = 24f,
                };

                values2.AddChild(contaminant1);
            }

            else
            {
                foreach ((var gas, (var mol, var percent, var alert)) in gasData)
                {
                    var percentRounded = MathF.Ceiling(percent * 100f);

                    var contaminant1 = new Label()
                    {
                        Text = gas + " (" + percentRounded + "%)",
                        HorizontalAlignment = HAlignment.Center,
                        VerticalAlignment = VAlignment.Center,
                        HorizontalExpand = true,
                        FontColorOverride = DetermineAlertColoration(alert),
                        Margin = new Thickness(0, 2, 0, 0),
                        MinHeight = 24f,
                    };

                    values2.AddChild(contaminant1);
                }
            }

            /*var contaminant2 = new Label()
            {
                Text = "N2O [1 mol (5%)]",
                HorizontalAlignment = HAlignment.Center,
                VerticalAlignment = VAlignment.Center,
                HorizontalExpand = true,
                FontColorOverride = StyleNano.DangerousRedFore,
                Margin = new Thickness(0, 2, 0, 0),
                MinHeight = 24f,
            };

            values2.AddChild(contaminant2);*/
        }

        //var stateLabel = new Label();
        //stateLabel.Text = entry.AlarmState.ToString();
        //control.AddChild(stateLabel);

            /*var stateTex = new TextureRect()
            {
                MinSize = new System.Numerics.Vector2(32f, 32f),
            };

            if (entry.AlarmState == Shared.Atmos.Monitor.AtmosAlarmType.Warning)
                stateTex.TexturePath = "/Textures/Interface/AtmosMonitoring/warning.png";
            else if (entry.AlarmState == Shared.Atmos.Monitor.AtmosAlarmType.Danger)
                stateTex.TexturePath = "/Textures/Interface/AtmosMonitoring/danger.png";

            control.AddChild(stateTex);

            foreach (var alert in entry.TemperatureAlerts)
            {
                var label = new Label();

                if (alert == Shared.Atmos.Monitor.AtmosMonitorLimitType.UpperWarning ||
                    alert == Shared.Atmos.Monitor.AtmosMonitorLimitType.UpperDanger)
                    label.Text = "High temperature";
                else
                    label.Text = "Low temperature";

                control.AddChild(label);
            }

            foreach (var alert in entry.PressureAlerts)
            {
                var label = new Label();

                if (alert == Shared.Atmos.Monitor.AtmosMonitorLimitType.UpperWarning ||
                    alert == Shared.Atmos.Monitor.AtmosMonitorLimitType.UpperDanger)
                    label.Text = "High pressure";
                else
                    label.Text = "Low pressure";

                control.AddChild(label);
            }

            foreach ((var gas, var alert) in entry.GasAlerts)
            {
                var label = new Label();

                if (alert == Shared.Atmos.Monitor.AtmosMonitorLimitType.UpperWarning ||
                    alert == Shared.Atmos.Monitor.AtmosMonitorLimitType.UpperDanger)
                    label.Text = "High conc. of " + gas;
                else
                    label.Text = "Low conc. of " + gas;

                control.AddChild(label);
            }*/

    }

    private Color DetermineAlertColoration(AtmosAlarmType alarmType)
    {
        switch (alarmType)
        {
            case AtmosAlarmType.Normal:
                return StyleNano.GoodGreenFore;
            case AtmosAlarmType.Warning:
                return StyleNano.ConcerningOrangeFore;
            case AtmosAlarmType.Danger:
                return StyleNano.DangerousRedFore;
        }

        return StyleNano.DisabledFore;
    }

    private void UpdateAlertsTable(NetEntity? currTrackedEntity, NetEntity? prevTrackedEntity)
    {
        foreach (var alert in AlertsTable.Children)
        {
            if (alert is not AtmosAlertButton)
                continue;

            var castAlert = (AtmosAlertButton) alert;

            if (castAlert.AirAlarmUid == prevTrackedEntity)
                castAlert.RemoveStyleClass(StyleNano.StyleClassButtonColorGreen);

            else if (castAlert.AirAlarmUid == currTrackedEntity)
                castAlert.AddStyleClass(StyleNano.StyleClassButtonColorGreen);

            if (castAlert?.Coordinates == null)
                continue;

            if (NavMap.TrackedEntities.TryGetValue(castAlert.AirAlarmUid, out var data))
            {
                data = new NavMapBlip
                    (data.Coordinates,
                    data.Texture,
                    (currTrackedEntity == null || castAlert.AirAlarmUid == currTrackedEntity) ? Color.LimeGreen : Color.LimeGreen * Color.DimGray,
                    castAlert.AirAlarmUid == currTrackedEntity);

                NavMap.TrackedEntities[castAlert.AirAlarmUid] = data;
            }
        }
    }

    /*private void SetTrackedEntityFromNavMap(NetEntity? netEntity)
    {
        if (netEntity == null)
            return;

        if (!_entManager.TryGetComponent<PowerMonitoringConsoleComponent>(_owner, out var console))
            return;

        if (!console.PowerMonitoringDeviceMetaData.TryGetValue(netEntity.Value, out var metaData))
            return;

        // Switch entity for master, if applicable
        // The master will always be in the same group as the entity
        if (metaData.CollectionMaster != null)
            netEntity = metaData.CollectionMaster;

        _focusEntity = netEntity;

        // Switch tabs
        SwitchTabsBasedOnPowerMonitoringConsoleGroup(metaData.Group);

        // Get the scroll position of the selected entity on the selected button the UI
        ActivateAutoScrollToFocus();

        // Send message to console that the focus has changed
        SendPowerMonitoringConsoleMessageAction?.Invoke(_focusEntity, metaData.Group);
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        AutoScrollToFocus();

        // Warning sign pulse        
        var lit = _gameTiming.RealTime.TotalSeconds % BlinkFrequency > BlinkFrequency / 2f;
        SystemWarningPanel.Modulate = lit ? Color.White : new Color(178, 178, 178);
    }

    private PowerMonitoringConsoleEntry[] GetUpdatedPowerMonitoringConsoleEntries(PowerMonitoringConsoleEntry[] entries, PowerMonitoringConsoleComponent console)
    {
        for (int i = 0; i < entries.Length; i++)
        {
            var entry = entries[i];

            if (!console.PowerMonitoringDeviceMetaData.TryGetValue(entry.NetEntity, out var metaData))
                continue;

            entries[i].MetaData = metaData;
        }

        // Sort all devices alphabetically by their entity name (not by power usage; otherwise their position on the UI will shift)
        Array.Sort(entries, AlphabeticalSort);

        return entries;
    }

    private int AlphabeticalSort(PowerMonitoringConsoleEntry x, PowerMonitoringConsoleEntry y)
    {
        if (x.MetaData?.EntityName == null)
            return -1;

        if (y.MetaData?.EntityName == null)
            return 1;

        return x.MetaData.Value.EntityName.CompareTo(y.MetaData.Value.EntityName);
    }*/
}

/*public struct PowerMonitoringConsoleTrackable
{
    public EntityUid EntityUid;
    public PowerMonitoringConsoleGroup Group;

    public PowerMonitoringConsoleTrackable(EntityUid uid, PowerMonitoringConsoleGroup group)
    {
        EntityUid = uid;
        Group = group;
    }
}*/

public sealed class AtmosAlertButton : Button
{
    public int IndexInTable;
    public NetEntity AirAlarmUid;
    public EntityCoordinates? Coordinates;
}
