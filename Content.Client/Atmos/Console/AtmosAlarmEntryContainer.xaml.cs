using Content.Client.Stylesheets;
using Content.Shared.Atmos;
using Content.Shared.Atmos.Components;
using Content.Shared.Atmos.Monitor;
using Content.Shared.FixedPoint;
using Content.Shared.Temperature;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;
using System.Linq;

namespace Content.Client.Atmos.Console;

[GenerateTypedNameReferences]
public sealed partial class AtmosAlarmEntryContainer : BoxContainer
{
    public NetEntity AirAlarmUid;
    public EntityCoordinates? Coordinates;

    private IResourceCache _cache;

    private Dictionary<AtmosAlarmType, string> _alarmStrings = new Dictionary<AtmosAlarmType, string>()
    {
        [AtmosAlarmType.Invalid] = "atmos-monitoring-window-invalid-state",
        [AtmosAlarmType.Normal] = "atmos-monitoring-window-normal-state",
        [AtmosAlarmType.Warning] = "atmos-monitoring-window-warning-state",
        [AtmosAlarmType.Danger] = "atmos-monitoring-window-danger-state",
    };

    private Dictionary<Gas, string> _gasShorthands = new Dictionary<Gas, string>()
    {
        [Gas.Ammonia] = "NH₃",
        [Gas.CarbonDioxide] = "CO₂",
        [Gas.Frezon] = "F",
        [Gas.Nitrogen] = "N₂",
        [Gas.NitrousOxide] = "N₂O",
        [Gas.Oxygen] = "O₂",
        [Gas.Plasma] = "P",
        [Gas.Tritium] = "T",
        [Gas.WaterVapor] = "H₂O",
    };

    public AtmosAlarmEntryContainer(NetEntity uid, EntityCoordinates? coordinates, AtmosMonitoringConsoleEntry entry, AtmosFocusDeviceData? focusData = null)
    {
        RobustXamlLoader.Load(this);

        _cache = IoCManager.Resolve<IResourceCache>();

        AirAlarmUid = uid;
        Coordinates = coordinates;

        // Load fonts
        var headerFont = new VectorFont(_cache.GetResource<FontResource>("/Fonts/NotoSans/NotoSans-Bold.ttf"), 11);
        var normalFont = new VectorFont(_cache.GetResource<FontResource>("/Fonts/NotoSansDisplay/NotoSansDisplay-Regular.ttf"), 11);
        var smallFont = new VectorFont(_cache.GetResource<FontResource>("/Fonts/NotoSans/NotoSans-Regular.ttf"), 10);

        // Update alarm state
        if (!_alarmStrings.TryGetValue(entry.AlarmState, out var alarmString))
            alarmString = "atmos-monitoring-window-invalid-state";

        AlarmStateLabel.Text = Loc.GetString(alarmString);
        AlarmStateLabel.FontColorOverride = GetAlarmLabelColor(entry.AlarmState);

        // Update alarm name
        AlarmNameLabel.Text = Loc.GetString("atmos-monitoring-window-air-alarm-label", ("address", entry.Address));

        if (focusData != null && focusData.Value.NetEntity == entry.Entity)
        {
            FocusContainer.Visible = true;

            // Update button
            FocusButton.AddStyleClass(StyleNano.StyleClassButtonColorGreen);
            ArrowTexture.TexturePath = "/Textures/Interface/Nano/inverted_triangle.svg.png";

            if (entry.AlarmState < AtmosAlarmType.Normal)
            {
                // No data
                MainDataContainer.Visible = false;

                NoDataLabel.FontOverride = headerFont;
                NoDataLabel.Visible = true;
            }

            else
            {
                // Set header fonts
                TemperatureHeaderLabel.FontOverride = headerFont;
                PressureHeaderLabel.FontOverride = headerFont;
                OxygenationHeaderLabel.FontOverride = headerFont;
                GasesHeaderLabel.FontOverride = headerFont;

                // Update temperature
                var tempK = (FixedPoint2) focusData.Value.TemperatureData.Item1;
                var tempC = (FixedPoint2) TemperatureHelpers.KelvinToCelsius(tempK.Float());

                TemperatureLabel.Text = Loc.GetString("atmos-monitoring-window-temperature-value", ("valueInC", tempC), ("valueInK", tempK));
                TemperatureLabel.FontOverride = normalFont;
                TemperatureLabel.FontColorOverride = GetAlarmLabelColor(focusData.Value.TemperatureData.Item2);

                // Update pressure
                PressureLabel.Text = Loc.GetString("atmos-monitoring-window-pressure-value", ("value", (FixedPoint2) focusData.Value.PressureData.Item1));
                PressureLabel.FontOverride = normalFont;
                PressureLabel.FontColorOverride = GetAlarmLabelColor(focusData.Value.PressureData.Item2);

                // Update oxygenation
                var oxygenPercent = (FixedPoint2) 0f;
                var oxygenAlert = AtmosAlarmType.Invalid;

                if (focusData.Value.GasData.TryGetValue(Gas.Oxygen, out var oxygenData))
                {
                    oxygenPercent = oxygenData.Item2 * 100f;
                    oxygenAlert = oxygenData.Item3;
                }

                OxygenationLabel.Text = Loc.GetString("atmos-monitoring-window-oxygenation-value", ("value", oxygenPercent));
                OxygenationLabel.FontOverride = normalFont;
                OxygenationLabel.FontColorOverride = GetAlarmLabelColor(oxygenAlert);

                // Update other present gases
                var gasData = focusData.Value.GasData.Where(g => g.Key != Gas.Oxygen);

                if (gasData.Count() == 0)
                {
                    // No other gases
                    var gasLabel = new Label()
                    {
                        Text = Loc.GetString("atmos-monitoring-window-other-gases-value-nil"),
                        FontOverride = normalFont,
                        FontColorOverride = StyleNano.DisabledFore,
                        HorizontalAlignment = HAlignment.Center,
                        VerticalAlignment = VAlignment.Center,
                        HorizontalExpand = true,
                        Margin = new Thickness(0, 2, 0, 0),
                        SetHeight = 24f,
                    };

                    GasGridContainer.AddChild(gasLabel);
                }

                else
                {
                    // Add an entry for each gas
                    foreach ((var gas, (var mol, var percent, var alert)) in gasData)
                    {
                        var gasPercent = (FixedPoint2) 0f;
                        gasPercent = percent * 100f;

                        if (!_gasShorthands.TryGetValue(gas, out var gasShorthand))
                            gasShorthand = "X";

                        var gasLabel = new Label()
                        {
                            Text = Loc.GetString("atmos-monitoring-window-other-gases-value", ("shorthand", gasShorthand), ("value", gasPercent)),
                            FontOverride = normalFont,
                            FontColorOverride = GetAlarmLabelColor(alert),
                            HorizontalAlignment = HAlignment.Center,
                            VerticalAlignment = VAlignment.Center,
                            HorizontalExpand = true,
                            Margin = new Thickness(0, 2, 0, 0),
                            SetHeight = 24f,
                        };

                        GasGridContainer.AddChild(gasLabel);
                    }
                }
            }

            // Update silence checkbox
            SilenceCheckBox.Label.FontOverride = smallFont;
            SilenceCheckBox.Label.FontColorOverride = Color.DarkGray;
        }
    }

    private Color GetAlarmLabelColor(AtmosAlarmType alarmType)
    {
        switch (alarmType)
        {
            case AtmosAlarmType.Normal:
                return StyleNano.GoodGreenFore;
            case AtmosAlarmType.Warning:
                return StyleNano.ConcerningOrangeFore;
            case AtmosAlarmType.Danger:
                return StyleNano.DangerousRedFore;
        }

        return StyleNano.DisabledFore;
    }
}
